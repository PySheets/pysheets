{
    "_": "n",
    "cells": {
        "I1": {
            "value": "Let's play Chess♟️",
            "key": "I1",
            "style": {
                "background-color": "#d8f3df"
            },
            "s": "=\n# no-worker\n\nimport ltk\nimport random\nimport time\nimport chess, chess.svg\n\ndef create_board():\n    board = chess.Board()\n    reset_board(board)\n    return board\n        \ndef reset_board(board):\n    board.clear()\n    board.set_fen(chess.STARTING_FEN)\n    \n    board.selected = None\n    board.highlighted = None\n    \n    def select(event):\n        start = time.time()\n        tile = ltk.find(event.target).closest(\"div\")\n        if board.selected:\n            move_if_legal(board.selected, tile)\n            board.selected = None\n        else:\n            piece = tile.attr(\"piece\")\n            if piece != \" \":\n                board.selected = tile\n                highlight(tile)\n        \n    lines = str(board).replace(\" \", \"\").replace(\".\", \" \")\n    for row, pieces in enumerate(lines.split(\"\\n\"), 1):\n        ltk.find(f\".row-{row}\").css(\"height\", 64)\n        for col, piece in enumerate(pieces, 1):\n            ltk.find(f\".pysheets-col-{col}\").css(\"width\", 64).css(\"padding-right\", 0).css(\"padding-left\", 0)\n            color = \"#f0d9b6\" if (row + col) % 2 == 0 else \"#b58863\"\n            ltk.find(f\"#{' ABCDEFGH'[col]}{row}\") \\\n                .attr(\"position\", f\"{' abcdefgh'[col]}{9 - row}\") \\\n                .css(\"padding\", 0) \\\n                .attr(\"piece\", piece) \\\n                .addClass(\"tile\") \\\n                .attr(\"background\", color) \\\n                .css(\"background\", color) \\\n                .css(\"color\", \"transparent\") \\\n                .html(chess.svg.piece(chess.Piece.from_symbol(piece)) if piece.strip() else \"\") \\\n                .on(\"mousedown\", ltk.proxy(select))\n    \nboard = create_board()\n\ncastling_moves = {\n    \"e1g1\": \"h1f1\",\n    \"e1c1\": \"a1d1\",\n    \"e8g8\": \"h8f8\",\n    \"e8c8\": \"a8d8\",\n}\n\ndef set_piece(cell):\n    piece = cell.attr(\"piece\")\n    cell.html(chess.svg.piece(chess.Piece.from_symbol(piece)) if piece.strip() else \"\")\n\ndef highlight(cell):\n    if board.highlighted:\n        board.highlighted.css(\"background\", board.highlighted.attr(\"background\"))\n    cell.css(\"background\", \"yellow\")\n    board.highlighted = cell\n\ndef respond():\n    moves = list(board.legal_moves)\n    if not moves:\n        return ltk.window.alert(\"CHECKMATE!\")\n    response = random.choice(moves)\n    uci = str(response)\n    start, end = ltk.find(f'[position=\"{uci[:2]}\"]'), ltk.find(\n        f'[position=\"{uci[2:]}\"]'\n    )\n    move_if_legal(start, end)\n\ndef castle(move):\n    uci = castling_moves[move.uci()]    \n    start, end = ltk.find(f'[position=\"{uci[:2]}\"]'), ltk.find(\n        f'[position=\"{uci[2:]}\"]'\n    )\n    end.find(\".piece\").remove()\n    end.attr(\"piece\", start.attr(\"piece\"))\n    start.attr(\"piece\", \" \")\n    set_piece(start)\n    set_piece(end)\n\ndef reset_game():\n    reset_board(board) \n    \ndef move_if_legal(start, end):\n    if start == end:\n        return\n    uci = f\"{start.attr('position')}{end.attr('position')}\"\n    move = chess.Move.from_uci(uci)\n    if move in board.legal_moves:\n        end.attr(\"piece\", start.attr(\"piece\"))\n        start.attr(\"piece\", \" \")\n        highlight(end)\n        set_piece(start)\n        set_piece(end)\n        if board.is_castling(move):\n            castle(move)\n        board.push(move)\n        \n        if board.is_checkmate():\n            winner = f\"{'White' if board.turn == chess.BLACK else 'Black'}\"\n            ltk.schedule(reset_game, \"checkmate - {winner} wins\", 5)\n            ltk.window.alert(f\"Checkmate! {winner} wins!\") \n        elif board.is_stalemate():\n            print(\"Stalemate! The game is a draw.\")\n            ltk.schedule(reset_game, \"stalemate - draw\", 5)\n            ltk.window.alert(f\"Stalemate! draw\") \n        else:\n            if board.turn == chess.BLACK:\n                ltk.schedule(respond, \"white moved, black is next\", 0.1)\n    else:\n        print(\"This is not a legal move\")\n\nltk.inject_css('.selection { display: none; }')\n        \n        \n\"Let's play Chess♟️\"\n"
        }
    },
    "previews": {},
    "created_timestamp": 0,
    "updated_timestamp": 0,
    "rows": {
        "1": 32
    },
    "columns": {
        "9": 186
    },
    "row_count": 65,
    "column_count": 26,
    "screenshot": "",
    "packages": "chess",
    "selected": "E4",
    "uid": "cfd8322d-76cb-42ce-9610-8f489da8f7f5",
    "name": "Tutorial - Playing Chess ♟️"
}